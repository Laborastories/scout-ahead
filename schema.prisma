datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  isAdmin    Boolean  @default(false)
  createdAt  DateTime @default(now())
  lastActiveTimestamp DateTime @default(now())
  
  updatedAt  DateTime @updatedAt
  createdSeries Series[]
  reports    Report[]  // Reports created by this user
  reviewedReports Report[] @relation("ReviewedReports") // Reports reviewed by this admin
}

model Report {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // The series being reported
  series      Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId    String

  // Who reported it (optional since we don't require login)
  reporter    User?     @relation(fields: [reporterId], references: [id])
  reporterId  String?

  // Report details
  reason      String    // The reason for the report
  details     String?   // Additional details provided by reporter
  status      String    @default("PENDING") // PENDING, REVIEWED, RESOLVED, DISMISSED, BLOCKED
  
  // Admin response
  reviewedBy  User?     @relation("ReviewedReports", fields: [reviewerId], references: [id])
  reviewerId  String?
  reviewNote  String?   // Internal note from admin
  reviewedAt  DateTime?
}

model Series {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creator       User?     @relation(fields: [creatorId], references: [id])
  creatorId     String?
  team1Name     String
  team2Name     String
  matchName     String
  team1AuthToken String    @unique
  team2AuthToken String    @unique
  format        String    // "BO1", "BO3", "BO5"
  fearlessDraft Boolean   @default(false)
  scrimBlock    Boolean   @default(false)
  games         Game[]
  status        String    @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED
  winner        String?   // "BLUE" or "RED"
  reports       Report[]  // Add this relation
  isBlocked     Boolean   @default(false)
}

model Game {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  series      Series       @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId    String
  gameNumber  Int
  blueSide    String      // Team name on blue side for this game
  redSide     String      // Team name on red side for this game
  status      String      @default("PENDING") // PENDING, IN_PROGRESS, DRAFT_COMPLETE, COMPLETED
  winner      String?     // "BLUE" or "RED"
  actions     DraftAction[]
}

model DraftAction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  type      String   // "PICK" or "BAN"
  phase     Int      // 1, 2, 3, 4
  team      String   // "BLUE" or "RED"
  champion  String
  position  Int      // Action number in the draft (1-20)
}

model Champion {
  id          String   @id // Champion ID (e.g. "Aatrox")
  key         String   // Champion numeric ID
  name        String
  tags        String[] // Champion tags (e.g. ["Fighter", "Tank"])
  roles       String[] // Champion roles (e.g. ["top", "mid"])
  splashPath  String?
  iconKey     String?  // S3 key for icon (e.g. "champs/icon/Aatrox.webp")
  splashKey   String?  // S3 key for splash art (e.g. "champs/splash/Aatrox.webp")
  updatedAt   DateTime @updatedAt
}
